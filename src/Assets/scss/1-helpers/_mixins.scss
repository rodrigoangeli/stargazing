/// Very basic media query mixin for min-width
/// @param {Number} $breakpoint
@mixin min-width($breakpoint) {
  @media screen and (min-width: #{if(type-of($breakpoint) == 'string', unquote($breakpoint), inspect($breakpoint))}) {
    @content;
  }
}

/// Very basic media query mixin for max-width
/// @param {Number} $breakpoint
@mixin max-width($breakpoint) {
  @media screen and (max-width: #{if(type-of($breakpoint) == 'string', unquote($breakpoint), inspect($breakpoint))}) {
    @content;
  }
}

/// Media query for high res devices
@mixin high-res() {
  @media (min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
    @content;
  }
}

@mixin themify($themes) {
  @each $theme, $map in $themes {
    .theme-#{$theme} & {
      $theme-map: () !global;
      @each $key, $submap in $map {
        $value: map-get(map-get($themes, $theme), "#{$key}");
        $theme-map: map-merge(
          $theme-map,
          (
            $key: $value,
          )
        ) !global;
      }
      @content;
      $theme-map: null !global;
    }
  }
}

@mixin spread-map($map: ()) {
  @each $key, $value in $map {
    #{$key}: $value;
  }
}
